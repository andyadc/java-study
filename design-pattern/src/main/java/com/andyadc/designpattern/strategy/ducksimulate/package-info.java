/**
 * * 1、模拟鸭子项目
 * 2、项目的新需求
 * 3、用OO原则解决新需求的不足
 * 4、用策略模式来新需求解决
 * 5、重新设计模拟鸭子项目
 * 6、总结策略模式定义
 * <p>
 * 继承的问题:对类的局部改动,尤其超类的局部改动,会影响其他部分,影响会有溢出效应.
 * <p>
 * 需要新的设计方式，应对项目的扩展性，降低复杂度：
 * 1）分析项目变化与不变部分，提取变化部分，抽象成接口+实现；
 * 2）鸭子哪些功能是会根据新需求变化的？叫声、飞行...
 * 3）好处：新增行为简单，行为类更好的复用，组合更方便。既有继承带来的复用好处，没有挖坑
 * <p>
 * 策略模式:分别封装行为接口.实现算法族,超类里放行为接口对象,在子类里具体设定行为对象.
 * 原则就是:分离变化部分,封装接口,基于接口编程各种功能.
 * 此模式让行为算法的变化独立于算法的使用者。
 * <p>
 * 策略模式注意点
 * 1、分析项目中变化部分与不变部分
 * 2、多用组合少用继承；用行为类组合，而不是行为的继承。更有弹性
 * 3、设计模式有没有相应的库直接使用？有些库或框架本身就用某种设计模式设计的
 *
 * @author andaicheng
 * @version 2017/1/11
 */
package com.andyadc.designpattern.strategy.ducksimulate;